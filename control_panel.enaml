from enaml.layout.api import hbox
from enaml.widgets.api import *
from enaml.core.api import Looper

import robot_interface
import serial_connection

enamldef MotorMovePromptWindow(Window): content:
	Form:
		Label:
			text = 'Motor'
		ComboBox: motor_selection:
			items = ['128','129','130']
			index = 0
		Label:
			text = 'Speed'
		Container:
			padding = 0
			constraints = [
				hbox(lbl, sldr),
				lbl.v_center == sldr.v_center,
			]
			Label: lbl:
				text << '%d' % sldr.value
				constraints = [width == 25]
			Slider: sldr:
				minimum = -127
				maximum = 128

		PushButton:
			text = 'Send Command'
			clicked ::
				robot_interface.RobotInterface().motor_move(
					motor_selection.selected_item, sldr.value)
				content.close()

enamldef RobotMovePromptWindow(Window): content:
	Form:
		Label:
			text = 'Direction'
		Container:
			padding = 0
			constraints = [
				hbox(dirlbl, dirsldr),
				dirlbl.v_center == dirsldr.v_center,
			]
			Label: dirlbl:
				text << '%d' % dirsldr.value
				constraints = [width == 25]
			Slider: dirsldr:
				minimum = 0
				maximum = 359
		Label:
			text = 'Speed'
		Container:
			padding = 0
			constraints = [
				hbox(lbl, speedsldr),
				lbl.v_center == speedsldr.v_center,
			]
			Label:
				id: lbl
				text << '%d' % speedsldr.value
				constraints = [width == 25]
			Slider:
				id: speedsldr
				minimum = -127
				maximum = 128
		PushButton:
			text = 'Send Command'
			clicked ::
				robot_interface.RobotInterface().robot_move(
					dirsldr.value, speedsldr.value)
				content.close()

enamldef GraphWindow(Window): context:
	attr model = TimeSeriesPlotModel()
	initial_size = (500,1000)
	Container:
		EnableCanvas:
			component = robot_interface.RobotInterface().get_plots()

enamldef Main(Window): main:
	title = 'Ballbot Control Panel'
	attr console_window = None
	attr graph_window = None
	attr connected: bool = False
	
	Container:
		PushButton:
			text << 'Connect' if not main.connected else 'Disconnect'
			checkable = True
			toggled ::
				main.connected = not main.connected
				serial_connection.SerialConnection().update_connection(
					main.connected)
		PushButton:
			text = 'Show Graphs'
			enabled << ( (not main.graph_window \
				or not main.graph_window.visible) and main.connected)
			clicked ::
				title = 'Graphs'
				main.graph_window = GraphWindow(title=title)
				session.add_window(graph_window)

		PushButton:
			text = 'Motor Move'
			enabled << main.connected
			clicked ::
				title = 'Move Motor'
				mod = 'application_modal'
				win = MotorMovePromptWindow(
					title=title, modality=mod, always_on_top=True)
				session.add_window(win)
		PushButton:
			text = 'Bot Move'
			enabled << main.connected
			clicked ::
				title = 'Move Robot'
				mod = 'application_modal'
				win = RobotMovePromptWindow(
					title=title, modality=mod, always_on_top=True)
				session.add_window(win)
		PushButton:
			text = 'Enable Balance Mode'
			enabled << main.connected
		ListControl:
			constraints = [height==22]
			ListItem:
				text = 'EMERGENCY STOP'
				font = 'bold 12pt Arial'
				background = 'red'
				foreground = 'yellow'
				selectable = False
				text_align = 'center'
				double_clicked ::
					robot_interface.RobotInterface().emergency_stop()